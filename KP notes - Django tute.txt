04-07-19
Working through Django Girls tutorial - https://tutorial.djangogirls.org/en/

I created a virtual environment in the Environments dir called django_env
I've already installed Django into this virtual env
When I want to work on the project, open cmd prompt, navigate to that dir, go into scripts dir and type 'activate'
when finished, type 'deactivate'

to run the server, navigate to this django project directory and type 'python manage.py runserver'

Files for the project are not stored within the environment, which should only be used for packages/libraries.
Files live in the django_project dir within github local repos. Open this project in PyCharm using the virtual env (should be in the project config already)

To view the site, open Chrome and go to 'http://localhost:8000', bookmarked in Chrome as 'Django local server'


Deployment:

First, push your code to GitHub

(Windows command-line)
$ git status
[...]
$ git add --all .
$ git status
[...]
$ git commit -m "Insert commentary here pertaining to commit"
[...]
$ git push

Then, log back in to PythonAnywhere and go to your Bash console (or start a new one), and run:

(PythonAnywhere command-line)
$ cd <your-pythonanywhere-domain>.pythonanywhere.com
$ git pull
[...]

(Remember to substitute <your-pythonanywhere-domain> with your actual PythonAnywhere subdomain, without the angle-brackets.)

Finally, hop on over to the "Web" page and hit Reload on your web app. (To reach other PythonAnywhere pages from the console, use the menu button in the upper right corner.) 
Your update should be live on https://subdomain.pythonanywhere.com -- check it out in the browser! If the blog posts on your PythonAnywhere site don't match the posts appearing on the blog hosted on your local server, that's OK. 
The databases on your local computer and Python Anywhere don't sync with the rest of your files.






Notes
in Django ORM, represent db structure as classes - these classes are called models
each class is going to be its own table in the db
each attribute within the class will be a different field in the db

To load django shell, command is 'python manage.py shell'



